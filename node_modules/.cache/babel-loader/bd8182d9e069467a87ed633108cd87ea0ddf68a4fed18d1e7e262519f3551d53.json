{"ast":null,"code":"var _jsxFileName = \"/Users/guilhermelemospimentel/Documents/Trybe/projetos/sd-028-b-project-trivia-react-redux/src/components/Questions.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Questions.css';\n// import { connect } from 'react-redux';\n// import { questionsEndpoint } from '../services/Api';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Questions extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      indexQuestions: 0,\n      arrayQuestion: [],\n      answered: false,\n      randomAnswer: [],\n      timer: 30\n    };\n    this.questionRender = arrayQuestion => {\n      const {\n        indexQuestions\n      } = this.state;\n      if (arrayQuestion.length > 0) {\n        const correctRender = {\n          dataTestid: 'correct-answer',\n          correctRender: true,\n          questionsOk: arrayQuestion[indexQuestions].correct_answer,\n          color: 'green'\n        };\n        const incorrectRender = arrayQuestion[indexQuestions].incorrect_answers.map((answer, index) => ({\n          dataTestid: `wrong-answer-${index}`,\n          correctRender: false,\n          questionsOk: answer,\n          color: 'red'\n        }));\n        const questionsAll = [...incorrectRender, correctRender];\n        const magicNumber = 0.5;\n        const misturaAnswer = questionsAll.sort(() => magicNumber - Math.random());\n        this.setState({\n          randomAnswer: misturaAnswer\n        });\n        // return misturaAnswer;\n      }\n    };\n    this.setTimer = () => {\n      const {\n        timer\n      } = this.state;\n      if (timer > 0) {\n        this.setState(prevState => ({\n          timer: prevState.timer - 1\n        }));\n      } else {\n        this.setState({\n          answered: true\n        });\n      }\n    };\n    this.btnChangeColor = () => {\n      this.setState({\n        answered: true\n      });\n    };\n  }\n  async componentDidMount() {\n    const recoveredQuestion = localStorage.getItem('token');\n    // const { dispatch, allQuestions } = this.props;\n    const url = await (await fetch(`https://opentdb.com/api.php?amount=5&token=${recoveredQuestion}`)).json();\n    const resultsQuestions = url.results;\n    this.setState({\n      arrayQuestion: resultsQuestions\n    });\n    // dispatch(questionsEndpoint([recoveredQuestion]));\n    const invalidToken = 3;\n    if (url.response_code === invalidToken) {\n      const {\n        history\n      } = this.props;\n      localStorage.removeItem('token');\n      history.push('/');\n    }\n    this.questionRender(resultsQuestions);\n    this.setTimer();\n  }\n  render() {\n    const {\n      arrayQuestion,\n      indexQuestions,\n      answered,\n      randomAnswer,\n      timer\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      //   <div>\n      //     {arrayQuestion.length > 0 && (\n      //       <>\n      //         <p data-testid=\"question-category\">\n      //           {arrayQuestion[indexQuestions].category}\n      //         </p>\n      //         <p data-testid=\"question-text\">\n      //           {arrayQuestion[indexQuestions].question}\n      //         </p>\n      //       </>\n      //     )}\n      //         <div data-testid=\"answer-options\">\n      //           {\n      //           arrayQuestion.length > 0 && (\n      //               <button\n      //                 key={ a.question }\n      //                 className={ a.question }\n      //                 data-testid={ a.dataTestid }\n      //                 value={ a.correct }\n      //               >\n      //                 {a.question}\n      //               </button>;\n      //             ))\n      // )\n      //             }\n      //   </div>\n      _jsxDEV(\"div\", {\n        children: [arrayQuestion.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": \"question-category\",\n            children: arrayQuestion[indexQuestions].category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": \"question-text\",\n            children: arrayQuestion[indexQuestions].question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-testid\": \"answer-options\",\n          children: arrayQuestion.length > 0 && randomAnswer.map(a => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: answered ? a.color : '',\n            \"data-testid\": a.dataTestid,\n            value: a.correct,\n            onClick: () => this.btnChangeColor(),\n            children: a.questionsOk\n          }, a.questionsOk, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: timer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this)\n    );\n  }\n}\nQuestions.propTypes = {\n  fetchingQuestions: PropTypes.func\n}.isRequired;\n\n// const mapDispatchToProps = {\n//   fetchingQuestions: questionsEndpoint,\n// };\n\n// const mapStateToProps = (state) => ({\n//   ...state.player,\n//   ...state.game,\n// });\n\nexport default Questions;\n// so criei aqui pra ser renderizado no login","map":{"version":3,"names":["React","PropTypes","Questions","Component","state","indexQuestions","arrayQuestion","answered","randomAnswer","timer","questionRender","length","correctRender","dataTestid","questionsOk","correct_answer","color","incorrectRender","incorrect_answers","map","answer","index","questionsAll","magicNumber","misturaAnswer","sort","Math","random","setState","setTimer","prevState","btnChangeColor","componentDidMount","recoveredQuestion","localStorage","getItem","url","fetch","json","resultsQuestions","results","invalidToken","response_code","history","props","removeItem","push","render","category","question","a","correct","propTypes","fetchingQuestions","func","isRequired"],"sources":["/Users/guilhermelemospimentel/Documents/Trybe/projetos/sd-028-b-project-trivia-react-redux/src/components/Questions.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Questions.css';\n// import { connect } from 'react-redux';\n// import { questionsEndpoint } from '../services/Api';\n\nclass Questions extends React.Component {\n  state = {\n    indexQuestions: 0,\n    arrayQuestion: [],\n    answered: false,\n    randomAnswer: [],\n    timer: 30,\n  };\n\n  async componentDidMount() {\n    const recoveredQuestion = localStorage.getItem('token');\n    // const { dispatch, allQuestions } = this.props;\n    const url = await (await fetch(`https://opentdb.com/api.php?amount=5&token=${recoveredQuestion}`)).json();\n    const resultsQuestions = url.results;\n    this.setState({\n      arrayQuestion: resultsQuestions,\n    });\n    // dispatch(questionsEndpoint([recoveredQuestion]));\n    const invalidToken = 3;\n    if (url.response_code === invalidToken) {\n      const { history } = this.props;\n      localStorage.removeItem('token');\n      history.push('/');\n    }\n    this.questionRender(resultsQuestions);\n    this.setTimer();\n  }\n\n  questionRender = (arrayQuestion) => {\n    const { indexQuestions } = this.state;\n    if (arrayQuestion.length > 0) {\n      const correctRender = {\n        dataTestid: 'correct-answer',\n        correctRender: true,\n        questionsOk: arrayQuestion[indexQuestions].correct_answer,\n        color: 'green',\n      };\n      const incorrectRender = arrayQuestion[indexQuestions].incorrect_answers\n        .map((answer, index) => ({\n          dataTestid: `wrong-answer-${index}`,\n          correctRender: false,\n          questionsOk: answer,\n          color: 'red',\n        }));\n      const questionsAll = [\n        ...incorrectRender,\n        correctRender,\n      ];\n      const magicNumber = 0.5;\n      const misturaAnswer = questionsAll.sort(() => magicNumber - Math.random());\n      this.setState({\n        randomAnswer: misturaAnswer,\n      });\n      // return misturaAnswer;\n    }\n  };\n\n  setTimer = () => {\n    const { timer } = this.state;\n    if (timer > 0) {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }));\n    } else {\n      this.setState({\n        answered: true,\n      });\n    }\n  };\n\n  btnChangeColor = () => {\n    this.setState({\n      answered: true,\n    });\n  };\n\n  render() {\n    const { arrayQuestion, indexQuestions, answered, randomAnswer, timer } = this.state;\n    return (\n    //   <div>\n    //     {arrayQuestion.length > 0 && (\n    //       <>\n    //         <p data-testid=\"question-category\">\n    //           {arrayQuestion[indexQuestions].category}\n    //         </p>\n    //         <p data-testid=\"question-text\">\n    //           {arrayQuestion[indexQuestions].question}\n    //         </p>\n    //       </>\n    //     )}\n    //         <div data-testid=\"answer-options\">\n    //           {\n    //           arrayQuestion.length > 0 && (\n    //               <button\n    //                 key={ a.question }\n    //                 className={ a.question }\n    //                 data-testid={ a.dataTestid }\n    //                 value={ a.correct }\n    //               >\n    //                 {a.question}\n    //               </button>;\n    //             ))\n    // )\n    //             }\n\n    //   </div>\n\n      <div>\n\n        {arrayQuestion.length > 0 && (\n          <>\n            <p data-testid=\"question-category\">\n              {arrayQuestion[indexQuestions].category}\n            </p>\n            <p data-testid=\"question-text\">\n              {arrayQuestion[indexQuestions].question}\n            </p>\n          </>\n\n        ) }\n\n        <div data-testid=\"answer-options\">\n\n          {arrayQuestion.length > 0 && (\n            randomAnswer.map((a) => (\n              <button\n                key={ a.questionsOk }\n                className={ answered ? a.color : '' }\n                data-testid={ a.dataTestid }\n                value={ a.correct }\n                onClick={ () => this.btnChangeColor() }\n\n              >\n                {a.questionsOk}\n              </button>\n            ))\n\n          )}\n        </div>\n\n        <div>\n          {timer}\n        </div>\n      </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  fetchingQuestions: PropTypes.func,\n}.isRequired;\n\n// const mapDispatchToProps = {\n//   fetchingQuestions: questionsEndpoint,\n// };\n\n// const mapStateToProps = (state) => ({\n//   ...state.player,\n//   ...state.game,\n// });\n\nexport default Questions;\n// so criei aqui pra ser renderizado no login\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}